REM  *****  BASIC  *****

' Count words between bookmarked sections -- attached to hotkey Ctrl-Alt-W
' Create insertable wordcount fields for the wordcounts under Insert -> Fields -> More Fields... -> Variables -> User Field
' If there are bookmarks, update the field counts every time the document is saved

' Developed using examples at: https://wiki.documentfoundation.org/Documentation/BASIC_Guide#Searching_for_Text_Portions
' And BASIC API reference at: https://api.libreoffice.org/docs/idl/ref/index.html

Sub on_hotkey  ' Set to run on hotkey specified in Accelerators.xcu file of the extension (initially Ctrl-Alt-W)
	dim result, statusbar
	if not isTextDocument(ThisComponent) then
		exit sub
	endif
	setupOnSave() 'Setup save action to force re-count prior to save
	result = bookmark_wordcounter()

	statusbar = ThisComponent.CurrentController.StatusIndicator
	statusbar.start(result, 100)
	wait 10000  ' ms
	statusbar.reset
	statusbar.end
End Sub

Function bookmark_wordcounter()
	dim doc, bookmarks, n_bookmarks, cursor, results, total, last_valid_i, i, name, next_name
	dim fnotes, fnotecount, thisnote, libreoffice_total
	doc = ThisComponent
	bookmarks = doc.Bookmarks
	n_bookmarks = bookmarks.getCount()
	cursor = doc.Text.createTextCursor

	' Count words in various sections
	results = "WORDCOUNT: "
	total = 0
	last_valid_i = -1
	for i=0 to n_bookmarks
		name = gotoBookmark(cursor, last_valid_i, FALSE)
		if name = "STOP" then
			i = 100
			exit for
		end if
		do
			next_name = gotoBookmark(cursor, i, TRUE)
			if next_name = FALSE or InStr(next_name, "_") > 0  then
				i = i+1
				if InStr(next_name, "_") > 0 then
					next_name = FALSE
				endif
			endif
		loop while next_name = FALSE  ' Last bookmark always returns non-FALSE value
		last_valid_i = i
		count = wordcount_string(cursor.String)
		total = total + count
		if i>0 then  ' Count words at beginning of document up to the first bookmark but only to include in total
			update_field("Wordcount_" & name, count)
			results = results & name & " " & InStr(name, "ZOTERO") & " =" & count & ", "
		endif
	next i

	' Count words in footnotes so total matches libreoffice total
	fnotes=doc.getFootNotes()
	if fnotes.hasElements() then
		fnotecount=0
		for nfnotes=0 to fnotes.getCount()-1
			thisnote=fnotes.getbyIndex(nfnotes)
			fnotecount=fnotecount+wordcount_string(thisnote.getString())
		next nfnotes
		total = total + fnotecount
		update_field("Wordcount_Footnotes", fnotecount)
		results = results & "Footnotes=" & fnotecount & ", "
	endif

	results = results & "Total" & "=" & total
	update_field("Wordcount_Total", total)

	' Warn if my calculation is different from libreoffice's
	' but allow some play in case the user puts a bookmark in the middle of a word which will effectively count it twice (once in each section)
	libreoffice_total = doc.WordCount
	if libreoffice_total > total or libreoffice_total + n_bookmarks < total then
		results = results & " (but libreoffice total=" & libreoffice_total & ")"
	endif

	bookmark_wordcounter = results
End Function

Function gotoBookmark(cursor, i, expand)
	' Goto bookmark i, expanding selection if expand is true
	' Return bookmark name on success; otherwise FALSE
	dim doc, bookmarks, n_bookmarks, name
	doc = ThisComponent
	bookmarks = doc.Bookmarks
	n_bookmarks = bookmarks.getCount()
	on Local Error goto BadBookmark
	if i<0 then
		cursor.gotoStart(expand)
		name = "Start"
	elseif i=n_bookmarks then
		cursor.gotoEnd(expand)
		name = "End"
	else
		bookmark = bookmarks.getByIndex(i)
		cursor.gotoRange(bookmark.Anchor, expand)
		name = bookmark.name
	endif
	gotoBookmark = name
	exit function
  BadBookmark:
	gotoBookmark = FALSE
End Function

Function wordcount_string(str)
	' Count words using Libreoffice's WORD_COUNT break iterator
	dim locale as new com.sun.star.lang.Locale
	dim brk, boundary_type, numwords, startpos, nextwd

	' Treat n-dash and m-dash as spaces.
	' These two characters are the default in Tools -> Options -> Writer -> General -> Wordcount -> Additional Separators
	' If I knew how to fetch that option data, I'd use it here instead of hard-coding it.
	str = replace(str, "–", " ")
	str = replace(str, "—", " ")

	brk=createUnoService("com.sun.star.i18n.BreakIterator")
	locale.Language="en"
	boundary_type = com.sun.star.i18n.WordType.WORD_COUNT

	numwords=0
	startpos=0
	nextwd=brk.getWordBoundary(str, startpos, locale, boundary_type, TRUE)
	do while nextwd.endPos > nextwd.startPos
		'Include the following line to display each word as it is counted -- for debug purposes
		'msgbox(nextwd.startPos & " " & nextwd.endPos & ": " & mid(str, nextwd.startPos+1, nextwd.endPos-nextwd.startPos))
		numwords=numwords+1
		nextwd=brk.nextWord(str, nextwd.startPos, locale, boundary_type)
	loop
	wordcount_string=numwords
End Function

Function update_field(varname, value)
	' Update user field variable `varname`, creating it if necessary
	dim doc, user_path, var_path, var
	doc = ThisComponent
	user_path = "com.sun.star.text.fieldmaster.User"
	var_path = user_path & "." & varname
	on Local error goto ErrorHandler
		var = doc.getTextFieldMasters.getByName(var_path)
	var.Value = value
	exit function
ErrorHandler:
	var = doc.createInstance(user_path)
	var.Name = varname
End Function

function isTextDocument(doc) as boolean
	' Taken from https://wiki.openoffice.org/wiki/Currently_active_document
	isTextDocument = FALSE
	if HasUnoInterfaces(doc, "com.sun.star.lang.XServiceInfo") then
	   if doc.supportsService ("com.sun.star.text.GenericTextDocument") then
	      isTextDocument = TRUE
		endif
	endif
End Function

Sub OnSave(oEvent As Object)
	if isTextDocument(ThisComponent) then
		if ThisComponent.Bookmarks.getCount() > 0 then
			bookmark_wordcounter()
		endif
	endif
End Sub

Sub setupOnSave()
	' Connects the LibreOffice "Save Document" event to our Basic subroutine `GlobalOnSave()`.
	' It adds OnSave to globalEventBroadcaster instead of ThisComponent (current doc) because
	' otherwise LibreOffice produces a warning that this document has macros.
	' Copies a stub subroutine GlobalOnSave() into the Standard library
	' so that OnSave doesn't produce errors even if the extension is uninstalled.
	copy_code("Wordcounter", "wordcount_sections", "Standard", "wordcount_sections", "copy_marker")

	Dim aProps(1) As New com.sun.star.beans.PropertyValue
	aProps(0).Name		= "EventType"
	aProps(0).Value		= "Script"
	aProps(1).Name		= "Script"
	aProps(1).Value		= "vnd.sun.star.script:Standard.wordcount_sections.GlobalOnSave?language=Basic&location=application"

	Dim oGlobalEventBroadcaster As Object
	oGlobalEventBroadcaster = GetDefaultContext().getByName( "/singletons/com.sun.star.frame.theGlobalEventBroadcaster" )
	oGlobalEventBroadcaster.Events.replaceByName("OnSave", aProps())
End Sub

Sub copy_code(fromlib, frommod, tolib, tomod, marker)
	' Copy code after _marker_ from fromlib/frommod into module tolib/tomod
	dim libs, libr, module, textSearch, options, found, code
	libs = globalscope.basiclibraries
	libs.loadlibrary(fromlib)
	libr = libs.getbyname(fromlib)
	module = libr.getbyname(frommod)

	textSearch = CreateUnoService("com.sun.star.util.TextSearch")
	options = CreateUnoStruct("com.sun.star.util.SearchOptions")
	options.algorithmType = com.sun.star.util.SearchAlgorithms.REGEXP
	options.searchString = "_" & marker & "_"
	textSearch.setOptions(options)
	found = textSearch.searchForward(module, 0, Len(module))
	code = right(module, Len(module) - found.endOffset(0) - 1)

	libr = libs.getbyname(tolib)
	if not libs.hasbyname(tolib) then
		libs.insertbyname(tolib)
	endif
	if not libr.hasbyname(tomod) then
		libr.insertbyname(tomod,code)
	else
		libs.loadlibrary(tolib)
		'libr.removebyname(tomod)
		libr.replacebyname(tomod,code)
	endif
	libs.storelibraries()
End Sub


' The rest of this file gets copied to Standard library so OnSave doesn't create an error if extension is uninstalled
' _copy_marker_
Sub GlobalOnSave(oEvent As Object)
	' This subroutine gets connected to the "Save Document" event of LibreOffice, OnSaveAs.
	' It provides a stub so that the OnSave event doesn't create errors even if the Wordcounter extension is removed
	dim library
	library = "Wordcounter"
	if globalscope.basiclibraries.hasbyname(library) then
		basiclibraries.loadLibrary(library)
		on Local Error goto Continuer
		Wordcounter.wordcount_sections.OnSave(oEvent)
Continuer:
	endif
End Sub
